package atgmlosbr

import (
	"fmt"
	"github.com/zeze322/wt-guided-weaponry/models"
)

templ AtgmLosbr(weapons []*models.Params) {
	<div class="relative flex justify-center mb-2">
		<table class="shadow-md sm:rounded-lg text-center rtl:text-right text-gray-900">
			<thead class="sticky top-0">
				<tr class="">
					<th scope="col" class="px-2 py-4 text-left border-r border-gray-700 text-black bg-gray-200">
						Name
					</th>
					for _, weapon := range weapons {
						<th scope="col" class="px-2 border-r dark:border-gray-700 text-black bg-gray-300">
							{ weapon.Name }
						</th>
					}
				</tr>
			</thead>
			<tbody class="font-normal text-sm">
				<th scope="row" class="px-2 py-4 text-xl text-black text-left bg-gray-300 border-t border-b border-gray-700" colspan={ fmt.Sprintf("%d", len(weapons)+1) }>Physical props</th>
				<tr class="border-b dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap text-left border-r dark:border-gray-700 bg-gray-200">
						Mass [kg]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.Mass }
						</td>
					}
				</tr>
				<tr class="bg-white border-b dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Mass at end of booster burn [kg]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MassAtEndOfBoosterBurn }
						</td>
					}
				</tr>
				<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Mass at end of sustainer burn [kg]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MassAtEndOfSustainerBurn }
						</td>
					}
				</tr>
				<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Calibre [mm]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.Calibre }
						</td>
					}
				</tr>
				<tr class="bg-white dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Length [m]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.Length }
						</td>
					}
				</tr>
				<th scope="row" class="px-2 py-4 text-xl text-black text-left font-mono bg-gray-300 border-t border-b border-gray-700" colspan="4">Engine props</th>
				<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Force exerted by booster [N]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.ForceExertedByBooster }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Burn time of booster [s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.BurnTimeOfBooster }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Raw acceleration at ignition [m/s²]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.RawAccelerationAtIgnition }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Specific impulse of booster [s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.SpecificImpulseOfBooster }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						ΔV of booster [m/s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.DeltaSpeedOfBooster }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Force exerted by sustainer [N]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.ForceExertedBySustainer }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Burn time of sustainer [s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.BurnTimeOfSustainer }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Specific impulse of sustainer [s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.SpecificImpulseOfSustainer }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						ΔV of sustainer [m/s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.DeltaSpeedOfSustainer }
						</td>
					}
				</tr>
				<tr class="bg-white border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Total ΔV [m/s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.TotalDeltaSpeed }
						</td>
					}
				</tr>
				<th scope="row" class="px-2 py-4 text-xl  text-black text-left font-mono bg-gray-300 border-t border-b border-gray-700" colspan="4">Fuse & Warhead props</th>
				<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Explosive mass [kg of TNT equivalent]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.ExplosiveMass }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Tandem charge
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.TandemCharge }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Penetration [mm]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.Penetration }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Proximity fuse
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.ProximityFuse }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Proximity fuse range [m]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.ProximityFuseRange }
						</td>
					}
				</tr>
				<tr class="bg-white border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Proximity fuse delay [s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.ProximityFuseDelay }
						</td>
					}
				</tr>
				<th scope="row" class="px-2 py-4 text-xl text-black text-left font-mono bg-gray-300 border-t border-b border-gray-700" colspan="4">Guidance props</th>
				<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Zoom
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.Zoom }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Guidance type
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.GuidanceType }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Guidance start delay [s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.GuidanceStartDelay }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Guidance duration [s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.GuidanceDuration }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Seeker warm up time [s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.SeekerWarmUpTime }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Seeker search duration [s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.SeekerSearchDuration }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Field of view [degrees]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.FieldOfView }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						IRCCM field of view [degrees]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.IRCCMFieldOfView }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Gimbal limit [degrees]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.GimbalLimit }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Track rate [degrees/second]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.TrackRate }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Uncaged seeker before launch
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.UncageSeekerBeforeLaunch }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Maximum lock angle before launch [degrees]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MaximumLockAngleBeforeLaunch }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Minimum angle of incidence of the seeker to the Sun for it to not capture the Sun [degrees] 
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MinimumAngleBetweenSeekerAndSunForNotCapture }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Can lock ground 
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.CanLockGround }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Lock-on range (ground) [km]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.LockOnRangeGround }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Lock-on range from rear-aspect [km]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.LockOnRangeFromRearAspect }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Lock-on range from all-aspect [km]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.LockOnRangeFromAllAspect }
						</td>
					}
				</tr>
				<tr class="bg-white border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Can lock after launch
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.CanLockAfterLaunch }
						</td>
					}
				</tr>
				<th scope="row" class="px-2 py-4 text-xl  text-black text-left font-mono bg-gray-300 border-t border-b border-gray-700" colspan="4">Flight props</th>
				<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Maximum fin angle of attack [degrees]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MaximumFinAngleOfAttack }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Wing area multiplier
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.WingAreaMultiplier }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Start speed [m/s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.StartSpeed }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Maximum speed [m/s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MaximumSpeed }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Minimum range [m]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MinimumRange }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Maximum (flight) range [km]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MaximumFlightRange }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Load factor limit at launch [G]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.LoadFactorLimitAtLaunch }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Maximum G-load [G]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MaximumOverLoad }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Thrust vectoring
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.ThrustVectoring }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Thrust vectoring angle [degreees]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.ThrustVectoringAngle }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Loft
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.Loft }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Loft angle [degreees]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.LoftAngle }
						</td>
					}
				</tr>
				<tr class="bg-white border-b border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Target elevation [degrees]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.TargetElevation }
						</td>
					}
				</tr>
				<tr class="bg-white border-t dark:bg-gray-800 dark:border-gray-700">
					<th scope="row" class="px-2 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left border-r dark:border-gray-700 bg-gray-200">
						Maximum target angular change [degrees/s]
					</th>
					for _, weapon := range weapons {
						<td class="border-r dark:border-gray-700 bg-gray-300">
							{ weapon.MaximumTargetAngularChange }
						</td>
					}
				</tr>
			</tbody>
		</table>
	</div>
}
