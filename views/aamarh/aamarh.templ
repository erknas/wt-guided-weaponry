package aamarh

import (
	"fmt"
	"github.com/zeze322/wt-guided-weaponry/models"
)

templ AamArh(weapons []*models.Params) {
	<div class="mt-5 h-[890px] w-[1530px] overflow-y-auto ml-96 container">
		<table class="border-separate">
			<thead class="sticky top-0 z-40 font-bold text-lg">
				<tr>
					<th class=" text-left px-1 text-gray-950 bg-gray-200 sticky left-0 border border-gray-500">Name</th>
					for _, weapon := range weapons {
						<th class="font-bold text-gray-950 text-center min-w-[12rem] bg-gray-200 border border-gray-500">{ weapon.Name }</th>
					}
				</tr>
			</thead>
			<tbody class="font-normal text-gray-200 text-left">
				<th scope="row" class="py-1 text-xl text-black text-left bg-green-600" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Physical props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="sticky left-0 border border-gray-500 text-left px-1 min-w-[22rem] bg-gray-700">Mass: [kg]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.Mass }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Mass at end of booster burn: [kg]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MassAtEndOfBoosterBurn }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Mass at end of sustainer burn: [kg]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MassAtEndOfSustainerBurn }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1  sticky left-0 bg-gray-700">Calibre: [mm]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.Calibre }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Length: [m]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.Length }</td>
					}
				</tr>
				<th class="py-1 text-xl text-black text-left bg-red-400 border border-gray-500" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Engine props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Force exerted by booster: [N]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ForceExertedByBooster }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Burn time of booster: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.BurnTimeOfBooster }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Raw acceleration at ignition: [m/s²]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.RawAccelerationAtIgnition }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Specific impulse of booster: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.SpecificImpulseOfBooster }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">ΔV of booster: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DeltaSpeedOfBooster }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Booster start delay: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.BoosterStartDelay }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Force exerted by sustainer: [N]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ForceExertedBySustainer }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Burn time of sustainer: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.BurnTimeOfSustainer }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Specific impulse of sustainer: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.SpecificImpulseOfSustainer }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">ΔV of sustainer: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DeltaSpeedOfSustainer }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Total ΔV: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.TotalDeltaSpeed }</td>
					}
				</tr>
				<th class="py-1 text-xl text-black text-left bg-yellow-300 border border-gray-500" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Fuse & Warhead props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Explosive mass: [kg of TNT equivalent]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ExplosiveMass }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Proximity fuse:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ProximityFuse }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Proximity fuse range: [m]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ProximityFuseRange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Proximity fuse shell detection (80-200 mm):</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ProximityFuseShellDetection }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Proximity fuse delay: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ProximityFuseDelay }</td>
					}
				</tr>
				<th class="py-1 text-xl text-black text-left bg-violet-400 border border-gray-500" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Guidance props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Guidance type:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.GuidanceType }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Guidance start delay: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.GuidanceStartDelay }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Guidance duration: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.GuidanceDuration }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Seeker warm up time: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.SeekerWarmUpTime }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Seeker search duration: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.SeekerSearchDuration }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Gimbal limit: [degrees]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.GimbalLimit }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Track rate: [degrees/second]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.TrackRate }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Uncaged seeker before launch:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.UncageSeekerBeforeLaunch }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum lock angle before launch: [degrees]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumLockAngleBeforeLaunch }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Lock-on range from all-aspect: [km]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.LockOnRangeFromAllAspect }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum break lock time: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumBreakLockTime }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Can lock after launch:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.CanLockAfterLaunch }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Band:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.Band }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Angular speed rejection threshold: [degrees/second]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.AngularSpeedRejectionThreshold }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Acceleration rejection threshold range: [m/s^2]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.AngularRejectionThresholdRange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Sidelobe attenuation:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.SidelobeAttenuation }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Transmitter power:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.TransmitterPower }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Transmitter angle of half sensitivity:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.TransmitterAngleOfHalfSensitivity }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Transmitter sidelobe sensitivity:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.TransmitterSidelobeSensitivity }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Receiver angle of half sensitivity:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ReceiverAngleOfHalfSensitivity }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Receiver sidelobe sensitivity:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ReceiverSidelobeSensitivity }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Distance minimum value:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DistanceMinimumValue }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Distance maximum value:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DistanceMaximumValue }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Distance width:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DistanceWidth }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Distance minimum signal gate:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DistanceMinimumSignalGate }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Distance ref width: [m]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DistanceRefWidth }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Distance gate search range: [m]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DistanceGateSearchRange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Distance gate alpha filter:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DistanceGateAlphaFilter }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Distance gate beta filter:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DistanceGateBetaFilter }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Doppler speed minimum value: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DopplerSpeedMinimumValue }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Doppler speed maximum value: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DopplerSpeedMaximumValue }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Doppler speed width: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DopplerSpeedWidth }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Doppler speed ref width: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DopplerSpeedRefWidth }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Doppler speed minimum signal gate: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DopplerSpeedMinimumSignalGate }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Doppler speed gate search range: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DopplerSpeedGateSearchRange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Doppler speed gate alpha filter:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DopplerSpeedGateAlphaFilter }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Doppler speed gate beta filter:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DopplerSpeedGateBetaFilter }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Proportional navigation multiplier: (affects how far ahead it attempts to lead)</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ProportionalNavigationMultiplier }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Base indicated air speed: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.BaseIndicatedAirSpeed }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">PID proportional term:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.PIDProportionalTerm }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">PID integral term:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.PIDIntegralTerm }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">PID integral term limit:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.PIDIntegralTermLimit }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">PID derivative term:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.PIDDerivativeTerm }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Inertial guidance drift speed:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.InertialNavigationDriftSpeed }</td>
					}
				</tr>
				<th class="py-1 text-xl text-black text-left bg-blue-400 border border-gray-500" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Flight props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum fin angle of attack: [degrees]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500  px-2">{ weapon.MaximumFinAngleOfAttack }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum fin lateral acceleration:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumFinLateralAcceleration }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Wing area multiplier:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.WingAreaMultiplier }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Start speed: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.StartSpeed }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum speed: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumSpeed }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Minimum range: [m]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MinimumRange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum flight range: [km]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumFlightRange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum G-load: [G]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumOverLoad }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Flight time until guidance starts (delay): [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.FlightTimeUntilGuidanceStarts }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Flight time when pull limit reaches 40%: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.FlightTimeWhenPullLimit40 }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Flight time when pull limit reaches 100%: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.FlightTimeWhenPullLimit100 }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Loft:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.Loft }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Loft angle: [degrees]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.LoftAngle }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Target elevation: [degrees]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.TargetElevation }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum target angular change: [degrees/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumTargetAngularChange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Thrust vectoring:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ThrustVectoring }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Thrust vectoring angle: [degrees]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ThrustVectoringAngle }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">ETA to impact when prop multiplier reaches x%: [s/%]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ETAToImpactWhenPropMultiplierReachesXPercentageX }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">ETA to impact when prop multiplier reaches x%: [s/%]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ETAToImpactWhenPropMultiplierReachesXPercentageX }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">ETA to impact when prop multiplier reaches x%: [s/%]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ETAToImpactWhenPropMultiplierReachesXPercentageX }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">ETA to impact when prop multiplier reaches x%: [s/%]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ETAToImpactWhenPropMultiplierReachesXPercentageX }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">ETA to impact when prop multiplier reaches x%: [s/%]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ETAToImpactWhenPropMultiplierReachesXPercentageX }</td>
					}
				</tr>
			</tbody>
		</table>
	</div>
}
