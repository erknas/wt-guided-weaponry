package aammcloslosbr

import (
	"fmt"
	"github.com/zeze322/wt-guided-weaponry/models"
)

templ AamMclosLosbr(weapons []*models.Params) {
	<div class="mt-5 h-[890px] w-[1530px] overflow-y-auto ml-96 container absolute">
		<table class="border-separate">
			<thead class="sticky top-0 z-40 font-bold text-lg h-14">
				<tr>
					<th class=" text-left px-1 text-gray-950 bg-gray-200 sticky left-0 border border-gray-500">Name</th>
					for _, weapon := range weapons {
						<th class="font-bold text-gray-950 text-center min-w-[12rem] bg-gray-200 border border-gray-500">{ weapon.Name }</th>
					}
				</tr>
			</thead>
			<tbody class="font-normal text-gray-200 text-left">
				<th scope="row" class="py-1 text-xl text-black text-left bg-green-600" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Physical props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="sticky left-0 border border-gray-500 text-left px-1 w-[22rem] bg-gray-700">Mass: [kg]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.Mass }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Mass at end of booster burn: [kg]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MassAtEndOfBoosterBurn }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Mass at end of sustainer burn: [kg]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MassAtEndOfSustainerBurn }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1  sticky left-0 bg-gray-700">Calibre: [mm]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.Calibre }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Length: [m]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.Length }</td>
					}
				</tr>
				<th class="py-1 text-xl text-black text-left bg-red-400 border border-gray-500" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Engine props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Force exerted by booster: [N]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ForceExertedByBooster }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Burn time of booster: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.BurnTimeOfBooster }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Raw acceleration at ignition: [m/s²]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.RawAccelerationAtIgnition }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Specific impulse of booster: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.SpecificImpulseOfBooster }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">ΔV of booster: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DeltaSpeedOfBooster }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Force exerted by sustainer: [N]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ForceExertedBySustainer }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Burn time of sustainer: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.BurnTimeOfSustainer }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Specific impulse of sustainer: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.SpecificImpulseOfSustainer }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">ΔV of sustainer: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.DeltaSpeedOfSustainer }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Total ΔV: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.TotalDeltaSpeed }</td>
					}
				</tr>
				<th class="py-1 text-xl text-black text-left bg-yellow-300 border border-gray-500" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Fuse & Warhead props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Explosive mass: [kg of TNT equivalent]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ExplosiveMass }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Proximity fuse:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ProximityFuse }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Proximity fuse range: [m]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ProximityFuseRange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Proximity fuse shell detection (80-200 mm):</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ProximityFuseShellDetection }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Proximity fuse delay: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ProximityFuseDelay }</td>
					}
				</tr>
				<th class="py-1 text-xl text-black text-left bg-violet-400 border border-gray-500" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Guidance props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Guidance type:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.GuidanceType }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Guidance duration: [s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.GuidanceDuration }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum angle allowed between the missile and the crosshair: [degrees]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumAngleAllowedBetweenMissileAndCrosshair }</td>
					}
				</tr>
				<th class="py-1 text-xl text-black text-left bg-blue-400 border border-gray-500" colspan={ fmt.Sprintf("%d", len(weapons)+2) }>
					<span class="sticky left-0">Flight props</span>
				</th>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Aim sensitivity:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500  px-2">{ weapon.AimSensitivity }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum axis values:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500  px-2">{ weapon.MaximumAxisValues }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Wing area multiplier:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.WingAreaMultiplier }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Start speed: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.StartSpeed }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum speed: [m/s]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumSpeed }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Minimum range: [m]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MinimumRange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum flight range: [km]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumFlightRange }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Maximum G-load: [G]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.MaximumOverLoad }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Thrust vectoring:</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ThrustVectoring }</td>
					}
				</tr>
				<tr class="hover:bg-gray-700 hover:text-gray-100">
					<td class="border border-gray-500 text-left px-1 sticky left-0 bg-gray-700">Thrust vectoring angle: [degrees]</td>
					for _, weapon := range weapons {
						<td class="border border-gray-500 px-2">{ weapon.ThrustVectoringAngle }</td>
					}
				</tr>
			</tbody>
		</table>
	</div>
}
